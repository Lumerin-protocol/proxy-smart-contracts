stages:
  - build
  - test
  - build-test
  - release-bindings
  - update-contracts
  - contract-functions
  - whitelist-clonefactory
  - populate-hr-contracts
  - deploy-contracts

variables:
  CI_GROUP_ID: "15533332" # id of the proxy group
  CONTRACT_STATE_SUBGROUP: "gitlab.com/TitanInd/proxy/smart-contracts-state" 
  NODE_IMAGE: "node:20-buster"


#####################################
#           Misc Templates          #
#####################################

# OpenSSH install
.install-ssh: &install-ssh
  - apt-get -yq update && apt-get -yqq install openssh-client
  - mkdir ~/.ssh
  - ssh-keyscan -t rsa github.com gitlab.com >> ~/.ssh/known_hosts

# Tags for all jobs
.tags-dev: &tags-dev
  - devops
  - bedrock
  - docker
  - titanio-dev

.tags-stg: &tags-stg
  - devops
  - bedrock
  - docker
  - titanio-stg

.tags-lmn: &tags-lmn
  - devops
  - bedrock
  - docker
  - titanio-lmn

# Sets ENV_NAME=ENV_VALUE in shell and in gitlab ci group variables
# ENV_NAME - variable name
# ENV_VALUE - variable value
# ENV_ENV - variable environment (leave unset for all of the environments)
#
# Gitlab api has a bug: PUT is not working correctly with environment field
# https://gitlab.com/gitlab-org/gitlab/-/issues/9912
# DELETE+POST is used instead
.set-env: &set-env
  - echo "Setting env variable $ENV_NAME=$ENV_VALUE in $ENV_ENV environment"
  - if [ -z "$ENV_ENV" ]; then export ENV_ENV="*"; fi
  - declare "$ENV_NAME=$ENV_VALUE" # sets env variable to the value also in the local shell
  - 'curl -sS --request DELETE
    --header "PRIVATE-TOKEN: $GITLAB_TOKEN"
    "$CI_API_V4_URL/groups/$CI_GROUP_ID/variables/$ENV_NAME?filter\[environment_scope\]=$ENV_ENV"'
  - 'curl -sS --fail --request POST
    --header "PRIVATE-TOKEN: $GITLAB_TOKEN"
    "$CI_API_V4_URL/groups/$CI_GROUP_ID/variables"
    --form "key=$ENV_NAME"
    --form "value=$ENV_VALUE"
    --form "environment_scope=$ENV_ENV"'
  - unset ENV_NAME ENV_VALUE ENV_ENV

# Downloads contract state stored in a specified repository
.download-state: &download-state
  - echo "Downloading contract state"
  - cp $SSH_KEY_CONTRACTS_STATE ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - git archive --remote=ssh://git@$CONTRACT_STATE_SUBGROUP/$CI_ENVIRONMENT_NAME.git --format=tar main .openzeppelin | tar xf -
  - rm -f ~/.ssh/id_rsa
  - echo "Downloading completed"

# Uploads contract state to a specified repository
.upload-state: &upload-state
  - echo "Uploading contract state"
  - cp $SSH_KEY_CONTRACTS_STATE ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - git config --global user.email "smart-contracts-ci@lumerin.io"
  - git config --global user.name "Smart Contracts CI"
  - git clone ssh://git@$CONTRACT_STATE_SUBGROUP/$CI_ENVIRONMENT_NAME.git ./temp
  - cp -r .openzeppelin ./temp
  - cd ./temp
  - git add .
  - git commit -m "Contract upgrade, CI commit SHA $CI_COMMIT_SHORT_SHA, CI pipeline ID $CI_PIPELINE_ID, CI job ID $CI_JOB_ID"
  - git push
  - cd ..
  - rm -rf ./temp
  - rm -f ~/.ssh/id_rsa
  - echo "Uploading completed"


#####################################
#         Deploy Templates          #
#####################################

.deploy_lumerintoken: &deploy_lumerintoken
  stage: deploy-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  script: 
    - make deploy-lumerin
    - export ENV_NAME="LUMERIN_TOKEN_ADDRESS" ENV_VALUE=$(cat lumerin-addr.tmp)
    - *set-env
    - export DYNAMIC_ENVIRONMENT_URL="$EXPLORER_URL/$(cat clonefactory-addr.tmp)"
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env

# Deploys clonefactory to the blockchain using env variables from the corresponding environment
# Updates the environment url to the etherscan url of the contract
# Requires the following variables to be set:
# - EXPLORER_URL = "https://sepolia.arbiscan.io/address" - the explorer url of the corresponding network 
.deploy_clonefactory_template: &deploy_clonefactory_template
  stage: deploy-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  artifacts:
    paths:
      - .openzeppelin
    reports:
      dotenv: deploy.env
  environment:
    name: dev # The environment.name should be overriden
    url: $DYNAMIC_ENVIRONMENT_URL
  script:
    - make deploy-clonefactory
    - export ENV_NAME="CLONE_FACTORY_ADDRESS" ENV_VALUE=$(cat clonefactory-addr.tmp) ENV_ENV=$CI_ENVIRONMENT_SLUG
    - *set-env
    - export DYNAMIC_ENVIRONMENT_URL="$EXPLORER_URL/$(cat clonefactory-addr.tmp)"
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
    - *upload-state

.deploy_validator_registry_template: &deploy_validator_registry_template
  stage: deploy-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  artifacts:
    paths:
      - .openzeppelin
    reports:
      dotenv: deploy.env
  environment:
    name: dev # The environment.name should be overriden
    url: $DYNAMIC_ENVIRONMENT_URL
  script:
    - make deploy-validator-registry
    - export ENV_NAME="VALIDATOR_REGISTRY_ADDRESS" ENV_VALUE=$(cat validator-registry-addr.tmp) ENV_ENV=$CI_ENVIRONMENT_SLUG
    - *set-env
    - export DYNAMIC_ENVIRONMENT_URL="$EXPLORER_URL/$(cat validator-registry-addr.tmp)"
    - echo "DYNAMIC_ENVIRONMENT_URL=$DYNAMIC_ENVIRONMENT_URL" >> deploy.env
    - *upload-state

.deploy_faucet_template: &deploy_faucet_template
  stage: deploy-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  artifacts:
    paths:
      - .openzeppelin
  environment:
    name: dev # The environment.name should be overriden
  script:
    - make deploy-faucet

.deploy_hr_contracts_template: &deploy_hr_contracts_template
  stage: populate-hr-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  environment:
    name: dev
  script:
    - make populate-contracts

.whitelist_clonefactory_template: &whitelist_clonefactory_template
  stage: whitelist-clonefactory
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  environment:
    name: dev
    action: prepare
  script:
    - make whitelist-clonefactory


#####################################
#         Update Templates          #
#####################################

.update_clonefactory_template: &update_clonefactory_template
  stage: update-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  artifacts:
    paths:
      - .openzeppelin
  environment:
    name: dev
    url: $EXPLORER_URL/$CLONE_FACTORY_ADDRESS
  before_script:
    - *install-ssh
  script:
    - *download-state
    - make update-clonefactory
    - *upload-state

.update_implementation_template: &update_implementation_template
  stage: update-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  artifacts:
    paths:
      - .openzeppelin
  environment:
    name: dev
    url: $EXPLORER_URL/$CLONE_FACTORY_ADDRESS
  before_script:
    - *install-ssh
  script:
    - *download-state
    - make update-implementation
    - *upload-state

.update_validator_registry_template: &update_validator_registry_template
  stage: update-contracts
  needs: ["compile-contracts", "test", "build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  artifacts:
    paths:
      - .openzeppelin
  environment:
    name: dev
    url: $EXPLORER_URL/$VALIDATOR_REGISTRY_ADDRESS
  before_script:
    - *install-ssh
  script:
    - *download-state
    - make update-validator-registry
    - *upload-state

#####################################
#       Contracts libs jobs         #
#####################################

compile-contracts:
  stage: build
  image: $NODE_IMAGE
  tags: *tags-dev
  environment:
    name: dev
    action: prepare
  script:
    - yarn install && make compile
  artifacts:
    paths:
      - abi
      - artifacts
      - cache
      - node_modules

build-contracts-go:
  stage: build
  needs: ["compile-contracts"]
  image: ethereum/client-go:alltools-stable
  tags: *tags-lmn
  before_script:
    - apk --no-cache add jq
  script: 
    - ./build-go.sh
  artifacts:
    untracked: true
    paths:
      - build-go

build-contracts-js:
  stage: build
  needs: ["compile-contracts"]
  image: $NODE_IMAGE
  tags: *tags-dev
  script: make build-js
  artifacts:
    untracked: true
    paths:
      - build-js

test:
  environment: test
  stage: test
  image: $NODE_IMAGE
  tags: *tags-dev
  allow_failure: false
  needs: ["build-contracts-js", "compile-contracts"]
  only:
    - branches    
  script:
    - yarn install
    - make test

# TODO: decide how to run upgrade tests when we have different versions of the smart-contract in the target branch
# it could be done by running the upgrade tests against particular commit, or maybe by using predefined scripts versioned
# together with the particular smart-contract version
#
# test-upgrade:
#   environment: test
#   stage: test
#   image: $NODE_IMAGE
#   tags: *tags-dev
#   allow_failure: false
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#   script:
#     - yarn install
#     - make compile
#     - make build-js
#     - BRANCH_TO_TEST_AGAINST=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME make test-upgrade


#####################################
#           Deploy Jobs             #
#####################################

deploy-lumerintoken-dev:
  variables:
    EXPLORER_URL: "https://sepolia.arbiscan.io/address"
  <<: *deploy_lumerintoken
  environment:
    name: dev
  tags: *tags-dev

deploy-lumerintoken-stg:
  variables:
    EXPLORER_URL: "https://arbiscan.io/address"
  <<: *deploy_lumerintoken
  environment:
    name: stg
  tags: *tags-stg

# We shouldn't redeploy LMR token on mainnet
# deploy-lumerintoken-lmn:
#   variables:
#     EXPLORER_URL: "https://arbiscan.io/address"
#   <<: *deploy_lumerintoken
#   environment:
#     name: lmn
#   tags: *tags-stg

deploy-clonefactory-dev:
  variables:
    EXPLORER_URL: "https://sepolia.arbiscan.io/address"
  <<: *deploy_clonefactory_template
  environment:
    name: dev
  tags: *tags-dev
  # only:
  #   - dev

deploy-clonefactory-stg:
  variables:
    EXPLORER_URL: "https://arbiscan.io/address"
  <<: *deploy_clonefactory_template
  environment:
    name: stg
  tags: *tags-stg
  # only:
  #   - stg

deploy-clonefactory-lmn:
  variables:
    EXPLORER_URL: "https://arbiscan.io/address"
  <<: *deploy_clonefactory_template
  environment:
    name: lmn
  tags: *tags-lmn
  # only:
  #   - main

deploy-faucet-dev:
  <<: *deploy_faucet_template
  environment:
    name: dev
  tags: *tags-dev
  # only:
  #   - dev

deploy-faucet-stg:
  <<: *deploy_faucet_template
  environment:
    name: stg
  tags: *tags-stg
  # only:
  #   - stg

deploy-faucet-lmn:
  <<: *deploy_faucet_template
  environment:
    name: lmn
  tags: *tags-lmn
  # only:
  #   - lmn

deploy-validator-registry-dev:
  variables:
    EXPLORER_URL: "https://sepolia.arbiscan.io/address"
  <<: *deploy_validator_registry_template
  environment:
    name: dev
  tags: *tags-dev
  # only:
  #   - dev

deploy-validator-registry-stg:
  variables:
    EXPLORER_URL: "https://arbiscan.io/address"
  <<: *deploy_validator_registry_template
  environment:
    name: stg
  tags: *tags-stg
  # only:
  #   - stg

deploy-validator-registry-lmn:
  variables:
    EXPLORER_URL: "https://arbiscan.io/address"
  <<: *deploy_validator_registry_template
  environment:
    name: lmn
  tags: *tags-lmn
  # only:
  #   - main

#####################################
#           Update Jobs             #
#####################################

update-clonefactory-dev:
  <<: *update_clonefactory_template
  environment:
    name: dev
  tags: *tags-dev

update-clonefactory-stg:
  <<: *update_clonefactory_template
  environment:
    name: stg
  tags: *tags-stg

update-clonefactory-lmn:
  <<: *update_clonefactory_template
  environment:
    name: lmn
  tags: *tags-lmn

update-implementation-dev:
  <<: *update_implementation_template
  environment:
    name: dev
  tags: *tags-dev

update-implementation-stg:
  <<: *update_implementation_template
  environment:
    name: stg
  tags: *tags-stg

update-implementation-lmn:
  <<: *update_implementation_template
  environment:
    name: lmn
  tags: *tags-lmn

update-validator-registry-dev:
  <<: *update_validator_registry_template
  environment:
    name: dev
  tags: *tags-dev

update-validator-registry-stg:
  <<: *update_validator_registry_template
  environment:
    name: stg
  tags: *tags-stg

update-validator-registry-lmn:
  <<: *update_validator_registry_template
  environment:
    name: lmn
  tags: *tags-lmn

#####################################
#             Actions               #
#####################################

populate-hr-contracts-dev:
  <<: *deploy_hr_contracts_template
  needs: ["compile-contracts", "build-contracts-js"]
  environment:
    name: dev
  tags: *tags-dev
  # only:
  #   - dev

populate-hr-contracts-stg:
  <<: *deploy_hr_contracts_template
  needs: ["compile-contracts", "build-contracts-js"]
  environment:
    name: stg
  tags: *tags-stg
  # only:
  #   - stg

populate-hr-contracts-lmn:
  <<: *deploy_hr_contracts_template
  needs: ["compile-contracts", "build-contracts-js"]
  environment:
    name: lmn
  tags: *tags-lmn
  # only:
  #   - main

whitelist-clonefactory-dev:
  <<: *whitelist_clonefactory_template
  environment:
    name: dev
  tags: *tags-dev
  # only:
  #   - dev

whitelist-clonefactory-stg:
  <<: *whitelist_clonefactory_template
  environment:
    name: stg
  tags: *tags-stg
  # only:
  #   - stg

whitelist-clonefactory-lmn:
  <<: *whitelist_clonefactory_template
  environment:
    name: lmn
  tags: *tags-lmn
  # only:
  #   - lmn

set-fee-recipient-dev:
  stage: contract-functions
  image: $NODE_IMAGE
  when: manual
  environment: dev
  tags: *tags-dev
  script:
    - make set-fee-recipient

set-fee-recipient-stg:
  stage: contract-functions
  image: $NODE_IMAGE
  when: manual
  environment: stg
  tags: *tags-stg
  script:
    - make set-fee-recipient

set-fee-recipient-lmn:
  stage: contract-functions
  image: $NODE_IMAGE
  when: manual
  environment: lmn
  tags: *tags-lmn
  script:
    - make set-fee-recipient

release-contracts-go:
  stage: release-bindings
  needs: ["build-contracts-go"]
  image: $NODE_IMAGE
  when: manual
  tags: *tags-lmn
  # only:
  #   - main
  before_script:
    - apt-get -yq update && apt-get -yqq install openssh-client
    - mkdir ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
  script:
    - cp $SSH_KEY_CONTRACTS_GO ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - make release-go
    - rm -f ~/.ssh/id_rsa

release-contracts-js:
  stage: release-bindings
  needs: ["build-contracts-js"]
  image: $NODE_IMAGE
  when: manual
  tags: *tags-lmn
  # only:
  #   - main
  before_script:
    - apt-get -yq update && apt-get -yqq install openssh-client
    - mkdir ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
  script:
    - cp $SSH_KEY_CONTRACTS_JS ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - make release-js
    - rm -f ~/.ssh/id_rsa

release-contracts-audit:
  stage: release-bindings
  needs: ["release-contracts-js", "release-contracts-go"]
  image: $NODE_IMAGE
  # when: manual
  tags: *tags-lmn
  # only:
  #   - main
  before_script:
    - apt-get -yq update && apt-get -yqq install openssh-client
    - mkdir ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
  script:
    - cp $SSH_KEY_SMART_CONTRACTS ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - make update-public-contracts
    - rm -f ~/.ssh/id_rsa

